{"version":3,"file":"commands.js","mappings":"YAAA,IAAIA,EACAC,EAYAC,EAPJ,SAASC,EAAUC,GACjBC,OAAOC,QAAQC,QAAQC,KAAKC,qBAAqBC,aAAa,eAAgB,CAC5EC,KAAM,eACNC,QAASR,GAEb,CAwDA,SAASS,EAAeD,GACtBZ,EAASc,KAAKC,MAAMH,EAAQA,SAC5BI,UAAUhB,GAAQ,SAASiB,GACzBf,EAAegB,QACfhB,EAAiB,KACjBD,EAASkB,YACTlB,EAAW,IACb,GACF,CAEA,SAASmB,EAAaR,GACpBV,EAAiB,KACjBD,EAASkB,YACTlB,EAAW,IACb,CA7EAI,OAAOgB,UA6DPhB,OAAOiB,QAAQC,UAAU,qBAlDzB,SAA2BC,GAIzB,IAHAxB,EAASyB,cAGKzB,EAAO0B,cAEnB,IACEC,QAAQ3B,EAAO0B,eAAe,SAASE,EAAMxB,GACvCwB,EACFC,iBAAiBD,GAAM,SAAUE,EAAS1B,GACpC0B,EACFzB,OAAOC,QAAQC,QAAQC,KAAKuB,KAAKC,qBAC/BF,EACA,CAAEG,aAAc5B,OAAO6B,aAAaC,OACpC,SAAUlB,GACRO,EAAML,WACR,KAGFhB,EAAUC,GACVoB,EAAML,YAEV,KAEAhB,EAAUC,GACVoB,EAAML,YAEV,GACF,CAAE,MAAOiB,GACPjC,EAAUiC,GACVZ,EAAML,WACR,KAEK,CAELlB,EAAWuB,EAGX,IAAMa,EAAM,IAAIC,IAAI,sBAAsBC,WAAWC,OAAOC,UAAUC,WAGtErC,OAAOC,QAAQqC,GAAGC,mBAAmBP,EAFf,CAAEQ,MAAO,GAAIC,OAAQ,GAAIC,iBAAiB,IAEP,SAAS9B,IAChEf,EAAiBe,EAAO+B,OACTC,gBAAgB5C,OAAO6C,UAAUC,sBAAuBtC,GACvEX,EAAe+C,gBAAgB5C,OAAO6C,UAAUE,oBAAqBhC,EACvE,GACF,CACF,G","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["let config;\nlet btnEvent;\n\n// The onReady function must be run each time a new page is loaded.\nOffice.onReady();\n\nfunction showError(error) {\n  Office.context.mailbox.item.notificationMessages.replaceAsync('github-error', {\n    type: 'errorMessage',\n    message: error\n  });\n}\n\nlet settingsDialog;\n\nfunction insertDefaultGist(event) {\n  config = getConfig();\n\n  // Check if the add-in has been configured.\n  if (config && config.defaultGistId) {\n    // Get the default gist content and insert.\n    try {\n      getGist(config.defaultGistId, function(gist, error) {\n        if (gist) {\n          buildBodyContent(gist, function (content, error) {\n            if (content) {\n              Office.context.mailbox.item.body.setSelectedDataAsync(\n                content,\n                { coercionType: Office.CoercionType.Html },\n                function (result) {\n                  event.completed();\n                }\n              );\n            } else {\n              showError(error);\n              event.completed();\n            }\n          });\n        } else {\n          showError(error);\n          event.completed();\n        }\n      });\n    } catch (err) {\n      showError(err);\n      event.completed();\n    }\n\n  } else {\n    // Save the event object so we can finish up later.\n    btnEvent = event;\n    // Not configured yet, display settings dialog with\n    // warn=1 to display warning.\n    const url = new URI('dialog.html?warn=1').absoluteTo(window.location).toString();\n    const dialogOptions = { width: 20, height: 40, displayInIframe: true };\n\n    Office.context.ui.displayDialogAsync(url, dialogOptions, function(result) {\n      settingsDialog = result.value;\n      settingsDialog.addEventHandler(Office.EventType.DialogMessageReceived, receiveMessage);\n      settingsDialog.addEventHandler(Office.EventType.DialogEventReceived, dialogClosed);\n    });\n  }\n}\n\n// Register the function.\nOffice.actions.associate(\"insertDefaultGist\", insertDefaultGist);\n\nfunction receiveMessage(message) {\n  config = JSON.parse(message.message);\n  setConfig(config, function(result) {\n    settingsDialog.close();\n    settingsDialog = null;\n    btnEvent.completed();\n    btnEvent = null;\n  });\n}\n\nfunction dialogClosed(message) {\n  settingsDialog = null;\n  btnEvent.completed();\n  btnEvent = null;\n}"],"names":["config","btnEvent","settingsDialog","showError","error","Office","context","mailbox","item","notificationMessages","replaceAsync","type","message","receiveMessage","JSON","parse","setConfig","result","close","completed","dialogClosed","onReady","actions","associate","event","getConfig","defaultGistId","getGist","gist","buildBodyContent","content","body","setSelectedDataAsync","coercionType","CoercionType","Html","err","url","URI","absoluteTo","window","location","toString","ui","displayDialogAsync","width","height","displayInIframe","value","addEventHandler","EventType","DialogMessageReceived","DialogEventReceived"],"sourceRoot":""}